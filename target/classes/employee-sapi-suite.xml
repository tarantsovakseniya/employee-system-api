<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:munit="http://www.mulesoft.org/schema/mule/munit" xmlns:munit-tools="http://www.mulesoft.org/schema/mule/munit-tools"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xsi:schemaLocation="
		http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
		http://www.mulesoft.org/schema/mule/munit http://www.mulesoft.org/schema/mule/munit/current/mule-munit.xsd
		http://www.mulesoft.org/schema/mule/munit-tools  http://www.mulesoft.org/schema/mule/munit-tools/current/mule-munit-tools.xsd">
	<munit:config name="employee-sapi-suite.xml" />
	<munit:test name="patch:\employees\(employeeId):application\json:employee-system-api-config-test" doc:id="ee9e6a5c-1c2f-49f6-8c29-f324270af100" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock POST:/employees/{id} Request" doc:id="8bf1cd43-9be7-4ee1-9d27-da1124f2d2eb" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="7990eff3-444b-4e36-be25-89520bbfa755" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output text/plain  --- readUrl('classpath://patchemployeesemployeeIdapplicationjsonemployeesystemapiconfigtest/mock_payload.dwl')]" mediaType="text/html " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://patchemployeesemployeeIdapplicationjsonemployeesystemapiconfigtest/mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://patchemployeesemployeeIdapplicationjsonemployeesystemapiconfigtest/mock_variable_.dwl')]" />
						<munit-tools:variable key="employeeId" value="#[output application/java --- readUrl('classpath://patchemployeesemployeeIdapplicationjsonemployeesystemapiconfigtest/mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy Set VL employeeId" doc:id="46779018-238c-42a3-8f3e-71b14fc30810" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="58b53ee3-6003-45ed-9575-ab4da7521819" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="a07e93d9-8b6f-4002-8c7c-6c225e8450bc" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import patchemployeesemployeeIdapplicationjsonemployeesystemapiconfigtest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
					<munit-tools:assert doc:name="Assert variables" doc:id="89f49cd5-a497-4b06-b042-704aa1eb72cb" message="The variables do not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import patchemployeesemployeeIdapplicationjsonemployeesystemapiconfigtest::spy_assert_variables
---
spy_assert_variables::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit-tools:spy doc:name="Spy Set PL Prepare response" doc:id="95df4598-4750-483f-9d44-7f34d41f8053" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="daabe4f4-1126-4b25-bb6a-ee25f142c3e7" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="8607f1fd-f7a4-43a3-9148-b985adacfad2" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import patchemployeesemployeeIdapplicationjsonemployeesystemapiconfigtest::spy_assert_payload1
---
spy_assert_payload1::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="9af5be32-b430-4899-8ebe-031e97519fd7" >
				<munit:payload value="#[output application/json  --- readUrl('classpath://patchemployeesemployeeIdapplicationjsonemployeesystemapiconfigtest/set-event_payload.dwl')]" encoding="UTF-8" mediaType="application/json " />
				<munit:attributes value="#[readUrl('classpath://patchemployeesemployeeIdapplicationjsonemployeesystemapiconfigtest/set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://patchemployeesemployeeIdapplicationjsonemployeesystemapiconfigtest/set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to patch:\employees\(employeeId):application\json:employee-system-api-config" doc:id="31ea7b76-0d0a-4b38-b44f-6ae0c6e42633" name="patch:\employees\(employeeId):application\json:employee-system-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="cfbcbdde-9237-4e8c-8b65-3b57c14de1b8" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import patchemployeesemployeeIdapplicationjsonemployeesystemapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Set VL employeeId" doc:id="cab6bed7-c648-47f4-97de-3327fe46770e" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="58b53ee3-6003-45ed-9575-ab4da7521819" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify Set PL Prepare response" doc:id="58bc2c9c-8d9c-4266-ae03-796cef98cef9" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="daabe4f4-1126-4b25-bb6a-ee25f142c3e7" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>
	<munit:test name="get:\employees\(employeeId):employee-system-api-config-test" doc:id="bf70c345-6492-43b4-a66c-1917d628e9dc" >
		<munit:behavior >
			<munit-tools:mock-when doc:name="Mock GET:/employees/{id} Request" doc:id="41a6c9a7-6427-4eec-a3f4-c11e039ec677" processor="http:request">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="bamboo-hr-request-config" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:then-return >
					<munit-tools:payload value="#[output application/json  --- readUrl('classpath://getemployeesemployeeIdemployeesystemapiconfigtest/mock_payload.dwl')]" mediaType="application/json " encoding="UTF-8" />
					<munit-tools:attributes value="#[readUrl('classpath://getemployeesemployeeIdemployeesystemapiconfigtest/mock_attributes.dwl')]" />
					<munit-tools:variables >
						<munit-tools:variable key="outboundHeaders" value="#[readUrl('classpath://getemployeesemployeeIdemployeesystemapiconfigtest/mock_variable_.dwl')]" />
						<munit-tools:variable key="employeeId" value="#[output application/java --- readUrl('classpath://getemployeesemployeeIdemployeesystemapiconfigtest/mock_variable_1.dwl')]" mediaType="application/java" encoding="UTF-8" />
					</munit-tools:variables>
				</munit-tools:then-return>
			</munit-tools:mock-when>
			<munit-tools:spy doc:name="Spy Set VL employeeId" doc:id="f64f6016-3e30-4c54-9bbe-d40e509d74bb" processor="ee:transform">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="1aa46bd9-f76a-4348-a09a-77e4568d76c4" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:after-call >
					<munit-tools:assert doc:name="Assert variables" doc:id="d6cf4da5-327a-40ae-b8ed-8c43ab77918d" message="The variables do not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import getemployeesemployeeIdemployeesystemapiconfigtest::spy_assert_variables
---
spy_assert_variables::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:after-call>
			</munit-tools:spy>
			<munit-tools:spy doc:name="Spy END" doc:id="fa00fcf8-87fa-4579-b379-0b89e8e3b0ff" processor="logger">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="265f9508-5dad-4307-8baf-97081a784af8" attributeName="doc:id" />
				</munit-tools:with-attributes>
				<munit-tools:before-call >
					<munit-tools:assert doc:name="Assert payload" doc:id="540eb856-c8b8-4939-94e2-49f2a14fe2f1" message="The payload does not match">
						<munit-tools:that ><![CDATA[#[%dw 2.0
import getemployeesemployeeIdemployeesystemapiconfigtest::spy_assert_payload
---
spy_assert_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
					</munit-tools:assert>
				</munit-tools:before-call>
			</munit-tools:spy>
			<munit:set-event doc:name="Set Input" doc:id="f21b1706-6f45-481a-ac4e-811d24313106" >
				<munit:payload value="#[readUrl('classpath://getemployeesemployeeIdemployeesystemapiconfigtest/set-event_payload.dwl')]" encoding="UTF-8" />
				<munit:attributes value="#[readUrl('classpath://getemployeesemployeeIdemployeesystemapiconfigtest/set-event_attributes.dwl')]" />
				<munit:variables >
					<munit:variable key="outboundHeaders" value="#[readUrl('classpath://getemployeesemployeeIdemployeesystemapiconfigtest/set-event_variable_.dwl')]" />
				</munit:variables>
			</munit:set-event>
		</munit:behavior>
		<munit:execution >
			<flow-ref doc:name="Flow-ref to get:\employees\(employeeId):employee-system-api-config" doc:id="8be3914c-31de-4a3e-96d8-bf3af0bfca44" name="get:\employees\(employeeId):employee-system-api-config"/>
		</munit:execution>
		<munit:validation >
			<munit-tools:assert doc:name="Assert payload" doc:id="ad35a4ef-e8cd-470e-9f61-51c032cf680a" message="The payload does not match">
				<munit-tools:that ><![CDATA[#[%dw 2.0
import getemployeesemployeeIdemployeesystemapiconfigtest::assert_expression_payload
---
assert_expression_payload::main({payload: payload, attributes: attributes, vars: vars})]]]></munit-tools:that>
			</munit-tools:assert>
			<munit-tools:verify-call doc:name="Verify Set VL employeeId" doc:id="622d8150-00f8-4333-bf4e-0f3fd5321190" processor="ee:transform" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="1aa46bd9-f76a-4348-a09a-77e4568d76c4" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
			<munit-tools:verify-call doc:name="Verify END" doc:id="60fa37f3-69ab-4eb4-9426-83e8fcdd127a" processor="logger" times="1">
				<munit-tools:with-attributes >
					<munit-tools:with-attribute whereValue="265f9508-5dad-4307-8baf-97081a784af8" attributeName="doc:id" />
				</munit-tools:with-attributes>
			</munit-tools:verify-call>
		</munit:validation>
	</munit:test>

</mule>
